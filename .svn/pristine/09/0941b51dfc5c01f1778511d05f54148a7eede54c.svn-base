package com.zyx1011.mobilesafe002;

import java.lang.reflect.Method;

import android.animation.Animator;
import android.animation.AnimatorInflater;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.lidroid.xutils.view.annotation.event.OnItemClick;
import com.zyx1011.mobilesafe002.constants.Constants;
import com.zyx1011.mobilesafe002.utils.PreferenceUtils;

public class MainActivity extends Activity {
	@ViewInject(R.id.iv_main_heima)
	private ImageView mIvHeima;

	@ViewInject(R.id.gv_main_menu)
	private GridView mGvMenu;

	@ViewInject(R.id.iv_main_setting)
	private ImageView mIvSetting;

	private Class<MainActivity> mClazz; // 用于反射
	private AlertDialog mProtectDialog;
	private View mView;

	// 手机防盗密码对话框控件
	private TextView mProtectTitle;
	private EditText mProtectPsw;
	private EditText mProtecRrepsw;
	private boolean mProtectFlag; // 判断是否设置了密码

	private BaseAdapter mMenuAdapter = new BaseAdapter() {

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			if (convertView == null) {
				convertView = View.inflate(MainActivity.this, R.layout.gridview_menu, null);
			}

			// 找到相应的View控件
			ImageView ivPic = (ImageView) convertView.findViewById(R.id.iv_menu_pic);
			TextView ivTitle = (TextView) convertView.findViewById(R.id.tv_menu_title);
			TextView ivDesc = (TextView) convertView.findViewById(R.id.tv_menu_desc);

			// 设置属性
			ivPic.setImageResource(Constants.MAIN_MENU.PIC[position]);
			ivTitle.setText(Constants.MAIN_MENU.TITLE[position]);
			ivDesc.setText(Constants.MAIN_MENU.DESC[position]);

			return convertView;
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public Object getItem(int position) {
			return Constants.MAIN_MENU.TITLE[position];
		}

		@Override
		public int getCount() {
			return Constants.MAIN_MENU.TITLE.length;
		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		ViewUtils.inject(this);

		initAnima();
		initData();
	}

	/**
	 * 初始化数据
	 */
	private void initData() {
		mGvMenu.setAdapter(mMenuAdapter);
		mClazz = MainActivity.class;
	}

	/**
	 * GridView菜单项点击响应事件
	 * 
	 * @param parent
	 * @param view
	 * @param position
	 * @param id
	 */
	@OnItemClick(R.id.gv_main_menu)
	public void onMenuClick(AdapterView<?> parent, View view, int position, long id) {
		Toast.makeText(MainActivity.this, Constants.MAIN_MENU.TITLE[position], Toast.LENGTH_SHORT).show();
		try {
			// 通过反射找到对应方法名的方法
			Method method = mClazz.getDeclaredMethod(Constants.MAIN_MENU.METHODS[position]);
			method.invoke(MainActivity.this);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	/**
	 * 设置(齿轮)点击响应事件
	 * 
	 * @param v
	 */
	@OnClick(R.id.iv_main_setting)
	public void onSetClick(View v) {
		Intent intent = new Intent(MainActivity.this, SettingActivity.class);
		startActivity(intent);
	}

	/**
	 * 初始化动画效果
	 */
	private void initAnima() {
		rotate(mIvSetting);
		set(mIvHeima);
	}

	/**
	 * 动画集合效果
	 */
	private void set(ImageView iv) {
		// 动画集
		Animator animator = AnimatorInflater.loadAnimator(this, R.animator.set);
		animator.setTarget(iv);
		animator.start();
	}

	/**
	 * 动画旋转效果
	 */
	private void rotate(ImageView iv) {
		// 旋转
		Animator animator = AnimatorInflater.loadAnimator(this, R.animator.rotate);
		animator.setTarget(iv);
		animator.start();
	}

	/**
	 * 执行手机防盗功能
	 */
	public void performPhoneProtect() {
		initDialog(); // 显示密码对话框
		if (TextUtils.isEmpty(PreferenceUtils.getString(this, Constants.PROTECT_PHONE.PASSWORD))) { // 没有设置密码
			mProtectTitle.setText("初始化密码");
			mProtectFlag = false;
		} else { // 设置了密码
			mProtectTitle.setText("验证密码");
			mProtecRrepsw.setVisibility(View.GONE);
			mProtectFlag = true;
		}
	}

	/**
	 * 执行拦截骚扰
	 */
	public void performInterceptHarry() {
		if (!PreferenceUtils.getBoolean(this, Constants.MAIN_MENU.INTERCEPT_HARRY)) {
			Toast.makeText(this, "骚扰拦截功能已关闭,请到设置中开启!", Toast.LENGTH_SHORT).show();
		}

		Intent intent = new Intent(this, InterceptHarry.class);
		startActivity(intent);
	}

	/**
	 * 处理按钮点击事件
	 */
	public void BtnOnClick(View v) {
		switch (v.getId()) {
		case R.id.btn_password_yes:
			if (mProtectFlag) {
				checkPsw();
			} else {
				savePsw();
			}
			break;

		case R.id.btn_password_no:
			mProtectDialog.dismiss();
			break;

		default:
			break;
		}
	}

	/**
	 * 手机防盗之设置密码
	 */
	private void savePsw() {
		String pass = mProtectPsw.getText().toString().trim();
		String repass = mProtecRrepsw.getText().toString().trim();

		if (!TextUtils.isEmpty(pass) && !TextUtils.isEmpty(repass)) {
			if (pass.equals(repass)) {
				PreferenceUtils.putString(this, Constants.PROTECT_PHONE.PASSWORD, pass);
				mProtectDialog.dismiss(); // 让对话框消失

				Intent intent = new Intent(MainActivity.this, ProtectActivity1.class);
				startActivity(intent);
			} else { // 两次输入的密码不一致
				Toast.makeText(this, "密码不一致,请重试!", Toast.LENGTH_SHORT).show();
				mProtectPsw.setText("");
				mProtecRrepsw.setText("");
			}
		} else { // 输入为空
			Toast.makeText(this, "密码不能为空!", Toast.LENGTH_SHORT).show();
		}
	}

	/**
	 * 手机防盗之验证密码
	 */
	private void checkPsw() {
		String pass = mProtectPsw.getText().toString().trim();

		if (!TextUtils.isEmpty(pass)) {
			if (pass.equals(PreferenceUtils.getString(this, Constants.PROTECT_PHONE.PASSWORD))) {
				Toast.makeText(this, "密码验证成功!", Toast.LENGTH_SHORT).show();
				mProtectDialog.dismiss();

				// 跳转到设置完成的界面,PROTECT_PHONE_FLAG默认值为true,所以加上SAFE_PHONE是否为空,以判断是否开启了手机防盗功能
				if (PreferenceUtils.getBoolean(this, Constants.PROTECT_PHONE.FLAG)
						&& !TextUtils.isEmpty(PreferenceUtils.getString(this, Constants.PROTECT_PHONE.SAFE_PHONE))) {

					Intent intent = new Intent(this, PhoneProtect.class);
					startActivity(intent);
				} else {
					Intent intent = new Intent(MainActivity.this, ProtectActivity1.class);
					startActivity(intent);
				}
			} else { // 密码不正确
				Toast.makeText(this, "密码验证失败,请重试!", Toast.LENGTH_SHORT).show();
				mProtectPsw.setText(""); // 清空输入框
			}
		} else { // 密码为空
			Toast.makeText(this, "密码不能为空!", Toast.LENGTH_SHORT).show();
		}
	}

	/**
	 * 初始化手机防盗的密码对话框
	 */
	private void initDialog() {
		AlertDialog.Builder builder = new Builder(this);
		mProtectDialog = builder.create();

		mView = View.inflate(this, R.layout.dialog_main_password, null);
		mProtectDialog.setView(mView); // 设置View给对话框

		mProtectTitle = (TextView) mView.findViewById(R.id.tv_password_title);
		mProtectPsw = (EditText) mView.findViewById(R.id.et_password_pass);
		mProtecRrepsw = (EditText) mView.findViewById(R.id.et_password_repass);

		mProtectDialog.show(); // 显示对话框
	}

}
