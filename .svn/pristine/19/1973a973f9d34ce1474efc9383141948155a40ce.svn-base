package com.zyx1011.mobilesafe002;

import java.lang.reflect.Method;

import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.lidroid.xutils.view.annotation.event.OnItemClick;
import com.zyx1011.mobilesafe002.constants.Constants;
import com.zyx1011.mobilesafe002.service.InterceptService;
import com.zyx1011.mobilesafe002.utils.PasswordUtils;
import com.zyx1011.mobilesafe002.utils.ServiceStatusUtils;

import android.animation.Animator;
import android.animation.AnimatorInflater;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity {
	@ViewInject(R.id.iv_main_heima)
	private ImageView mIvHeima;

	@ViewInject(R.id.gv_main_menu)
	private GridView mGvMenu;

	@ViewInject(R.id.iv_main_setting)
	private ImageView mIvSetting;

	private Class<MainActivity> mClazz; // 用于反射
	private BaseAdapter mMenuAdapter = new BaseAdapter() {

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			if (convertView == null) {
				convertView = View.inflate(MainActivity.this, R.layout.gridview_main_item, null);
			}

			// 找到相应的View控件
			ImageView ivPic = (ImageView) convertView.findViewById(R.id.iv_menu_pic);
			TextView ivTitle = (TextView) convertView.findViewById(R.id.tv_menu_title);
			TextView ivDesc = (TextView) convertView.findViewById(R.id.tv_menu_desc);

			// 设置属性
			ivPic.setImageResource(Constants.MAIN_MENU.PIC[position]);
			ivTitle.setText(Constants.MAIN_MENU.TITLE[position]);
			ivDesc.setText(Constants.MAIN_MENU.DESC[position]);

			return convertView;
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public Object getItem(int position) {
			return Constants.MAIN_MENU.TITLE[position];
		}

		@Override
		public int getCount() {
			return Constants.MAIN_MENU.TITLE.length;
		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		ViewUtils.inject(this);

		initAnima();
		initData();
	}

	/**
	 * 初始化数据
	 */
	private void initData() {
		mGvMenu.setAdapter(mMenuAdapter);
		mClazz = MainActivity.class;
	}

	/**
	 * GridView菜单项点击响应事件
	 * 
	 * @param parent
	 * @param view
	 * @param position
	 * @param id
	 */
	@OnItemClick(R.id.gv_main_menu)
	public void onMenuClick(AdapterView<?> parent, View view, int position, long id) {
		try {
			// 通过反射找到对应方法名的方法
			Method method = mClazz.getDeclaredMethod(Constants.MAIN_MENU.METHODS[position]);
			method.invoke(MainActivity.this);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	/**
	 * 设置(齿轮)点击响应事件
	 * 
	 * @param v
	 */
	@OnClick(R.id.iv_main_setting)
	public void onSetClick(View v) {
		Intent intent = new Intent(MainActivity.this, SettingActivity.class);
		startActivity(intent);
	}

	/**
	 * 初始化动画效果
	 */
	private void initAnima() {
		rotate(mIvSetting);
		set(mIvHeima);
	}

	/**
	 * 动画集合效果
	 */
	private void set(ImageView iv) {
		// 动画集
		Animator animator = AnimatorInflater.loadAnimator(this, R.animator.set);
		animator.setTarget(iv);
		animator.start();
	}

	/**
	 * 动画旋转效果
	 */
	private void rotate(ImageView iv) {
		// 旋转
		Animator animator = AnimatorInflater.loadAnimator(this, R.animator.rotate);
		animator.setTarget(iv);
		animator.start();
	}

	/**
	 * 执行手机防盗功能
	 */
	public void performPhoneProtect() {
		PasswordUtils.checkPass(this, ProtectActivity1.class);
	}

	/**
	 * 执行拦截骚扰
	 */
	public void performInterceptHarry() {
		if (!ServiceStatusUtils.isRunningService(this, InterceptService.class)) {
			Toast.makeText(this, "骚扰拦截功能已关闭,请到设置中开启!", Toast.LENGTH_SHORT).show();
		}

		Intent intent = new Intent(this, InterceptHarryActivity.class);
		startActivity(intent);
	}

	/**
	 * 执行软件管家
	 */
	public void performSoftManager() {
		Intent intent = new Intent(this, SoftManagerActivity.class);
		startActivity(intent);
	}

	/**
	 * 执行进程管理
	 */
	public void performProcessManager() {
		Intent intent = new Intent(this, ProcessManagerActivity.class);
		startActivity(intent);
	}

	/**
	 * 执行流量统计
	 */
	public void performFlowCount() {
		Toast.makeText(this, "流量统计", Toast.LENGTH_SHORT).show();
	}

	/**
	 * 执行手机杀毒
	 */
	public void performAntiVirus() {
		Toast.makeText(this, "手机杀毒", Toast.LENGTH_SHORT).show();
	}

	/**
	 * 执行缓存清理
	 */
	public void performCacheClean() {
		Toast.makeText(this, "缓存清理", Toast.LENGTH_SHORT).show();
	}

	/**
	 * 执行常用工具
	 */
	public void performToolsManager() {
		Intent intent = new Intent(this, ToolsManagerActivity.class);
		startActivity(intent);
	}

}
